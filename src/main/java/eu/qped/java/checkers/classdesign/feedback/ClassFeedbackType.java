package eu.qped.java.checkers.classdesign.feedback;

/**
 An enumeration class that lists the different types of feedback that can be generated by the class
 {@link ClassFeedbackGenerator}.
 */

public enum ClassFeedbackType {
    //Keyword Errors
    /** Feedback type for when the element name is not as expected. */
     WRONG_ELEMENT_NAME("ElementNameError"),
     /** Feedback type for when the element type is not as expected. */
     WRONG_ELEMENT_TYPE("ElementTypeError"),
     /** Feedback type for when the access modifier for the element is not as expected. */
     WRONG_ACCESS_MODIFIER("AccessModifierError"),
     /** Feedback type for when the non-access modifiers for the element are not as expected. */
     WRONG_NON_ACCESS_MODIFIER("NonAccessModifierError"),
     /** Feedback type for when the access modifier for the class is not as expected. */
     WRONG_CLASS_ACCESS_MODIFIER("ClassAccessModifierError"),
     /** Feedback type for when the non-access modifiers for the class are not as expected. */
    WRONG_CLASS_NON_ACCESS_MODIFIER("ClassNonAccessModifierError"),

//Field Errors

    /** Feedback type for when fields are missing from the class. */
     MISSING_FIELDS("MissingFieldsError"),
     /** Feedback type for when there are too many fields in the class. */
    TOO_MANY_FIELDS("TooManyFieldsError"),
// HIDDEN_FIELD("HiddenFieldError"),

//Method Errors
    /** Feedback type for when methods are missing from the class. */
     MISSING_METHODS("MissingMethodsError"),
     /** Feedback type for when there are too many methods in the class. */
    TOO_MANY_METHODS("TooManyMethodsError"),
// OVERWRITTEN_METHOD("OverwrittenMethodError"),
// HIDDEN_METHOD("HiddenMethodError"),

//Class Errors
    /** Feedback type for when the class type is not as expected. */
     WRONG_CLASS_TYPE("ClassTypeError"),
     /* Feedback type for when the class name is not as expected. */
     WRONG_CLASS_NAME("ClassNameError"),
     /** Feedback type for when classes are missing from the program. */
    MISSING_CLASSES("MissingClassesError"),

//Class Errors
    /** Feedback type for when the super class is missing. */
     MISSING_SUPER_CLASS("MissingSuperClass"),
     /** Feedback type for when an interface implementation is missing. */
     MISSING_INTERFACE_IMPLEMENTATION("MissingInterfaceImplementationError"),
     /** Feedback type for when a class extension is missing. */
     MISSING_CLASS_EXTENSION("MissingClassExtensionError"),
     /** Feedback type for when the super class type is not as expected. */
     WRONG_SUPER_CLASS_TYPE("SuperClassTypeError"),
     /** Feedback type for when the super class name is not as expected. */
     WRONG_SUPER_CLASS_NAME("SuperClassNameError"),
     /** Feedback type for when the implemented interface names are different from what was expected. */
     DIFFERENT_INTERFACE_NAMES_EXPECTED("DifferentInterfaceNamesExpected"),
    /** Feedback type for when the extended class names are different from what was expected. */
    DIFFERENT_CLASS_NAMES_EXPECTED("DifferentClassNamesExpected");

    /**
     A string representing the error in reference.
     */
    private final String error;

    /**
     Constructor for creating a new ClassFeedbackType.
     @param error A string representing the error in reference.
     */
    ClassFeedbackType(final String error) {
        this.error = error;
    }

    /**
     Returns a string representation of the error associated with this ClassFeedbackType.
     @return A string representing the error associated with this ClassFeedbackType.
     */
    public String toString() {
        return this.error;
    }

}
